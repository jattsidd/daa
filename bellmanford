#include <iostream>
#include <vector>

struct Edge {
    int source, destination, weight;
};

void BellmanFord(std::vector<Edge>& edges, int numVertices, int source) {
    std::vector<int> distances(numVertices, INT_MAX);
    distances[source] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 0; i < numVertices - 1; ++i) {
        for (const auto& edge : edges) {
            int u = edge.source;
            int v = edge.destination;
            int weight = edge.weight;

            if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
            }
        }
    }

    // Check for negative-weight cycles
    for (const auto& edge : edges) {
        int u = edge.source;
        int v = edge.destination;
        int weight = edge.weight;

        if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
            std::cout << "Negative-weight cycle detected!\n";
            return;
        }
    }

    // Print the shortest distances
    std::cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < numVertices; ++i) {
        std::cout << i << "\t\t" << distances[i] << "\n";
    }
}

int main() {
    int numVertices, numEdges;
    std::cout << "Enter the number of vertices: ";
    std::cin >> numVertices;

    std::cout << "Enter the number of edges: ";
    std::cin >> numEdges;

    std::vector<Edge> edges(numEdges);
    std::cout << "Enter the source, destination, and weight of each edge:\n";
    for (int i = 0; i < numEdges; ++i) {
        std::cin >> edges[i].source >> edges[i].destination >> edges[i].weight;
    }

    int source;
    std::cout << "Enter the source vertex: ";
    std::cin >> source;

    BellmanFord(edges, numVertices, source);

    return 0;
}
